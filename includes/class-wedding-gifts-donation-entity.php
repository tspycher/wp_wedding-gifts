<?php

/**
 * Created by PhpStorm.
 * User: tspycher
 * Date: 22/03/16
 * Time: 07:46
 */
class Wedding_Gifts_Donation_Entity extends Wedding_Gifts_EntityManager{
    protected $id;
    protected $gift_id;
    protected $amount;
    protected $comment;
    protected $who;
    protected $email;
    protected $user_id;
    protected $date;


    const DB_NAME = 'donations';

    /**
     * @return mixed
     */
    public function getAmount() {
        return $this->amount;
    }

    /**
     * @param mixed $amount
     *
     * @return $this
     */
    public function setAmount( $amount ) {
        $this->amount = $amount;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getComment() {
        return $this->comment;
    }

    /**
     * @param mixed $comment
     *
     * @return $this
     */
    public function setComment( $comment ) {
        $this->comment = $comment;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getDate() {
        return $this->date;
    }

    /**
     * @param mixed $date
     *
     * @return $this
     */
    public function setDate( $date ) {
        $this->date = $date;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getGiftId() {
        return $this->gift_id;
    }

    /**
     * @param mixed $gift_id
     *
     * @return $this
     */
    public function setGiftId( $gift_id ) {
        $this->gift_id = $gift_id;
        return $this;
    }

    public function getGift() {
        return Wedding_Gifts_Entity::find($this->getGiftId());
    }

    /**
     * @return mixed
     */
    public function getId() {
        return $this->id;
    }

    /**
     * @param mixed $id
     *
     * @return $this
     */
    public function setId( $id ) {
        $this->id = $id;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getWho() {
        return $this->who;
    }

    /**
     * @param mixed $who
     *
     * @return $this
     */
    public function setWho( $who, $override = false ) {
        global $current_user;
        if($current_user->ID and !$override) {
            $this->who = $current_user->data->display_name;
            $this->email = $current_user->data->user_email;
            $this->user_id =  $current_user->data->ID;
        } else {
            $this->who = $who;
        }

        return $this;
    }

    /**
     * @return mixed
     */
    public function getEmail() {
        return $this->email;
    }

    /**
     * @param mixed $email
     *
     * @return $this
     */
    public function setEmail( $email ) {
        $this->email = $email;
        return $this;
    }

    /**
     * @return mixed
     */
    public function getUserId() {
        return $this->user_id;
    }

    /**
     * @param mixed $user_id
     *
     * @return $this
     */
    public function setUserId( $user_id ) {
        $this->user_id = $user_id;
        return $this;
    }

    static function loadFromRow( $row ) {
        // TODO: Implement loadFromRow() method.
        $o = new static();
        $o
            ->setId($row->id)
            ->setGiftId($row->gift_id)
            ->setComment($row->comment)
            ->setWho($row->name, true)
            ->setEmail($row->email, true)
            ->setUserId($row->user_id)
            ->setAmount(floatval($row->amount))
            ->setDate($row->date);
        return $o;
    }

    public function store() {
        global $wpdb;

        if($this->getId()) {
            // Update
        } else {
            // Insert
            $sql = sprintf('INSERT INTO %s (`gift_id`, `comment`, `name`, `amount`, `email`, `user_id`) VALUES (\'%s\', \'%s\', \'%s\', \'%s\', \'%s\', \'%s\')',
                static::dbname(), $this->getGiftId(), $this->getComment(), $this->getWho(), $this->getAmount(), $this->getEmail(), $this->getUserId());
        }
        require_once( ABSPATH . 'wp-admin/includes/upgrade.php' );
        dbDelta( $sql );
    }

    static function findAll($gift_id = null) {
        //return parent::findAll(); // TODO: Change the autogenerated stub
        global $wpdb;

        $result = $wpdb->get_results(sprintf("SELECT * FROM %s %s", self::dbname(), ($gift_id ? 'WHERE gift_id = '. $gift_id : null)));
        $entities = array();
        foreach($result as $row)
        {
            $entities[] = static::loadFromRow($row);
        }
        return $entities;
    }


}